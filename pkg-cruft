#!/usr/bin/env ruby
# frozen_string_literal: true

# The MIT License (MIT)
#
# Copyright (c) 2018 Thomas Hurst <tom@hur.st>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

require 'open3'

PREFIX = ENV.fetch('PREFIX', '/usr/local')

CONCURRENCY = ENV.fetch('CONCURRENCY', 16).to_i.clamp(1, 32)

IGNORE_UNPACKAGED = ENV.fetch('IGNORE_UNPACKAGED', 'www/*:poudriere/*:varnish/*')
                       .split(':').map { |pat| File.join(PREFIX, pat) }

IGNORE_LLD = ENV.fetch('IGNORE_LDD', 'go/src/*/testdata/*')
                .split(':').map { |pat| File.join(PREFIX, pat) }

trap(:INT) do
  puts 'Interrupt'
  exit! 2
end

Thread.abort_on_exception = true

# Stupidly simple futures - run the passed block in the background, return the
# result in +value+, blocking if necessary. Pass through method calls via
# method_missing to make it easy to swap in.
class Futur
  def initialize(&block)
    @mutex = Mutex.new
    @thread = Thread.new do
      @mutex.synchronize do
        @value = yield
      end
    end
  end

  def value
    @mutex.synchronize do
      if @thread
        @thread.join
        @thread = nil
      end

      @value
    end
  end

  def method_missing(meth, *args, &block)
    value.__send__(meth, *args, &block)
  end
end

# Super-simple concurrency; initialize with a thread-safe block, and call
# each with an Enumerable and block to run in the current thread with each
# result.
#
# nils are silently ignored.
class Concurrently
  def initialize(threads: 2, &job)
    @job = job
    @threads = Integer(threads)
  end

  def each(input)
    return enum_for(:each, input) unless block_given?

    inq = SizedQueue.new(@threads * 4)
    outq = SizedQueue.new(@threads * 4)

    pool = Array.new(@threads).map do
      Thread.new do
        begin
          while (work = inq.deq)
            outq.enq @job.call(work)
          end
        ensure
          outq.enq Thread.current
        end
      end
    end

    ingest = Thread.new do
      input.each { |i| inq.enq(i) unless i.nil? }
      inq.close
    end

    until pool.empty?
      case (res = outq.deq)
      when Thread then pool.delete(res).join
      else yield res
      end
    end

    ingest.join
  end
end

# List libraries required by a given set of executables, ignoring errors,
# grouping results by executable.
module Ldd
  Lib = Struct.new(:name, :path)
  NOT_FOUND = Class.new

  def self.libs(bins)
    out, _err, _status = Open3.capture3('/usr/bin/ldd', '-f', '%A %o %p\n', *bins)

    out
      .lines
      .map { |line| line.chomp.split(' ', 3) }
      .group_by(&:first)
      .transform_values do |v|
        v.map do |_exe, lib, path|
          Lib.new(lib, path == 'not found' ? NOT_FOUND : File.absolute_path(path))
        end
    end
  end
end

# Thin wrapper around pkgng
module Pkg
  Error = Class.new(StandardError)

  def self.pkg(*args)
    out, err, status = Open3.capture3('/usr/sbin/pkg', *args)
    raise(Error, "pkg exited #{status}, stderr: #{err}") unless status.success?
    out
  end

  def self.remote_packages
    pkg('rquery', '%n').split
  end

  def self.local_packages
    pkg('query', '%n').split
  end

  def self.pkg_plist(which = '-a')
    out = pkg('info', '-l', *which)
    pkg_to_plist = {}

    out.split(/^(?=\S)/).each do |pkg_files|
      pkg, files = pkg_files.split(':', 2)

      pkg_to_plist[pkg] = files.split("\n\t").map(&:strip).reject(&:empty?)
    end

    pkg_to_plist
  end

  def self.defunct_packages
    local_packages - remote_packages
  end

  def self.which(file)
    pkg('which', '-q', file).chomp
  rescue Error
  end
end

# Caches the package list for quick lookups.
class Pkgdb
  def initialize
    @pkg_files = Concurrently.new(threads: 4) do |pkgs|
      Pkg.pkg_plist(pkgs)
    end.each(Pkg.local_packages.each_slice(32)).reduce({}, :merge)

    @file_to_pkg = {}
    @pkg_files.each do |pkg, files|
      files.each do |file|
        @file_to_pkg[file] = pkg
      end
    end
  end

  def pkg_for_file(file)
    @file_to_pkg[file]
  end

  def each_pkg_file(&block)
    @pkg_files.each(&block)
  end

  def files_for_pkg(pkg)
    @pkg_files[pkg]
  end

  def each_file_pkg(&block)
    @file_to_pkg.each(&block)
  end

  def each_file(&block)
    @file_to_pkg.each_key(&block)
  end

  def basename_to_pkgs(bn)
    @basename_to_pkgs ||= each_file_pkg.group_by { |file, _pkg| File.basename(file) }
                                       .transform_values do |file_pkg|
                                         file_pkg.map(&:last).flatten.uniq
                                       end

    @basename_to_pkgs[bn]
  end
end

# Thin wrapper around procstat(1)
module Procstat
  PROCSTAT_CMD = '/usr/bin/procstat'

  PsVM = Struct.new(:pid, :start, :end, :prot, :res, :priv_res, :ref, :shadowed, :flags, :type, :path)
  PsExe = Struct.new(:pid, :name, :osrel, :path)

  def self.vm_mappings(what = '-a')
    procvm, _err, _status = Open3.capture3(PROCSTAT_CMD, '-hv', what.to_s)
    procs = procvm.lines.map do |line|
      PsVM.new(*line.chomp.split(/\s+/, 11))
    end
  end

  def self.binary(pid)
    psexe, err, status = Open3.capture3(PROCSTAT_CMD, '-hb', Integer(pid).to_s)

    if /sysctl: kern.proc.pathname/.match?(err)
      PsExe.new(pid, `ps -o comm= #{pid}`.chomp, nil, nil)
    else
      PsExe.new(*psexe.chomp.split(/\s+/, 4))
    end
  end
end

# pkg-cruft itself.
module Commands
  def self.help
    puts " #{$PROGRAM_NAME} [ #{methods(false).join(' | ')} ]

defunct:

  List local packages that are not available from remote repositories.

unpackaged:

  List files in PREFIX that are not provided by any installed package.

libcheck:

  Check for packaged files that link against unpackaged, compat, or obsolete
  libraries.

checkrestart:

  Check for running processes that may require restarting due to replaced
  executables or libraries.  May produce false-positives and requires root
  for full operation."
  end

  def self.defunct
    puts Pkg.defunct_packages
  end

  def self.unpackaged
    require 'find'

    pkgdb = Pkgdb.new

    Find.find(PREFIX) do |f|
      if IGNORE_UNPACKAGED.any? { |ign| File.fnmatch(ign, f) }
        Find.prune
      elsif File.file?(f) && !pkgdb.pkg_for_file(f)
        puts f
      end
    end
  end

  def self.libcheck
    pkgdb = Pkgdb.new

    pkg_libs = Hash.new { |h, k| h[k] = [] }
    pkgdb.each_file_pkg do |f, pkg|
      pkg_libs[File.basename(f)] << [pkg, f] if /\.so(\.\d+)*/.match?(f)
    end

    defunct = Pkg.defunct_packages

    Concurrently.new(threads: CONCURRENCY) do |exes|
      Ldd.libs(exes.reject { |f| IGNORE_LLD.any? { |ign| File.fnmatch(ign, f) } })
    end.each(pkgdb.each_file.each_slice(16)) do |batch|
      batch.each do |exe, libs|
        pkg = pkgdb.pkg_for_file(exe)

        libs.each do |lib|
          lib_pkg = pkgdb.pkg_for_file(lib.path)

          if lib.path == Ldd::NOT_FOUND
            if (src = pkg_libs.fetch(lib.name, false))
              # if the lib is in this package, assume all is well
              unless src.any? { |spkg, _path| spkg == pkg }
                candidates = src.map { |s| s.join(' => ') }.join(', ')
                puts "#{pkg}: #{exe} private library #{lib.name} => #{candidates}?"
              end
            else
              puts "#{pkg}: #{exe} missing library #{lib.name}"
            end
          elsif lib.path.include?('compat/') && lib_pkg != pkg
            puts "#{pkg}: #{exe} using #{lib_pkg} compat library #{lib.path}"
          elsif lib.path.start_with?(PREFIX) && lib_pkg.nil?
            puts "#{pkg}: #{exe} using unpackaged library #{lib.path}"
          elsif defunct.include?(lib_pkg)
            puts "#{pkg}: #{exe} using defunct packaged library #{lib.path} from #{lib_pkg}"
          end
        end
      end
    end
  end


  def self.checkrestart
    pkgdb = Futur.new { Pkgdb.new }

    procs = Procstat.vm_mappings.select { |ps| ps.type == 'vn' && ps.path.empty? }
                                .group_by(&:pid)

    procs.keys.lazy.map do |pid|
      Procstat.binary(Integer(pid))
    end.select(&:pid).group_by(&:path).each do |_path, pses|
      pses.each do |pse|
        if pse.path
          print "#{pse.path} (#{pkgdb.pkg_for_file(pse.path) || 'unpackaged'})"
        else
          candidates = pkgdb.basename_to_pkgs(pse.name)
          print '[MISSING EXECUTABLE] '
          if candidates
            print "(#{candidates.join(', ')})?"
          else
            print '(unknown package)'
          end
        end
        puts " running as #{pse.pid} (#{pse.name})"
      end
    end
  end
end

if $PROGRAM_NAME == __FILE__
  commands = Commands.methods(false)
  if ARGV.size == 1 && commands.include?(ARGV.first.to_sym)
    Commands.send(ARGV.first.to_sym)
  else
    Commands.help
    exit 1
  end
end
